<shaders>
    <shader name="ChromaticAbberation">
        <parameters>
            <param name="TargetPos" type="vec2"/>   
            <param name="MaxDistortion" type="float"/>
        </parameters>
        <vertex><![CDATA[
            attribute vec3 Position;
            attribute vec4 Color;
            attribute vec2 TexCoord;
            attribute vec4 RenderData;
            attribute float Scale;
            attribute float Time;

            attribute vec2 TargetPos;
            attribute float MaxDistortion;


            varying vec4 Color0;
            varying vec2 TexCoord0;
            varying vec4 RenderDataOut;
            varying float ScaleOut;

            varying vec2 TargetPosOut;
            varying float MaxDistortionOut;

            uniform mat4 Transform;

            void main(void) {
                Color0 = Color;
                TexCoord0 = TexCoord;
                RenderDataOut = RenderData;
                ScaleOut = Scale;

                TargetPosOut = TargetPos;
                MaxDistortionOut = MaxDistortion;

                gl_Position = Transform * vec4(Position.xyz, 1.0);
            }
        ]]></vertex>
        <fragment><![CDATA[#version 130
            varying lowp vec4 Color0;
            varying mediump vec2 TexCoord0;
            varying lowp vec4 RenderDataOut;
            varying lowp float ScaleOut;

            varying mediump vec2 TargetPosOut;
            varying mediump float MaxDistortionOut;

            uniform sampler2D Texture0;


vec2 barrelDistortion(vec2 coord, float amt, vec2 pos) {
	vec2 cx = coord - pos.x;
    vec2 cy = coord - pos.y;
	float dist = dot(cx, cy);
	return coord + (coord - pos) * dist * amt;
}

float sat( float t )
{
	return clamp( t, 0.0, 1.0 );
}

float linterp( float t ) {
	return sat( 1.0 - abs( 2.0*t - 1.0 ) );
}

float remap( float t, float a, float b ) {
	return sat( (t - a) / (b - a) );
}

vec4 spectrum_offset( float t ) {
	vec4 ret;
	float lo = step(t,0.5);
	float hi = 1.0-lo;
	float w = remap( t, 1.0/6.0, 5.0/6.0 );
	ret = vec4(lo,1.0,hi, 1.) * vec4(1.0-w, w, 1.0-w, 1.);

	return pow( ret, vec4(1.0/2.2) );
}

const int num_iter = 12;
const float reci_num_iter_f = 1.0 / float(num_iter);

void main()
{
	vec2 uv=(TexCoord0.xy);

    vec2 pos = (TargetPosOut / RenderDataOut.zw) * ScaleOut;

	vec4 sumcol = vec4(0.0);
	vec4 sumw = vec4(0.0);
	for ( int i=0; i<num_iter;++i )
	{
		float t = float(i) * reci_num_iter_f;
		vec4 w = spectrum_offset( t );
		sumw += w;
		sumcol += w * texture2D( Texture0, barrelDistortion(uv, MaxDistortionOut*t, pos) );
	}

	gl_FragColor = sumcol / sumw;
}


// Copyright (c) 2014 Jaume Sanchez

        ]]></fragment>
    </shader>
</shaders>